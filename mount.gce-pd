#!/bin/zsh
emulate -L zsh
setopt err_exit warn_create_global no_unset
#setopt xtrace

readonly PROGNAME=$0
readonly ARGS="$*"

function set_purpose {
	jobs -Z "${PROGNAME}[$1] $ARGS"
}
set_purpose mounter

typeset -A opts

zmodload -F zsh/zutil +b:zparseopts
zparseopts -A opts -D -E -K -M o+:=opts_arg s f=fake n v=verbose t:=fstype
unset "opts[-o]"
unset "opts[-t]"

if (( $+opts_arg )); then
	() {
		local optarg
		local i
		for (( i=2; i<=${#opts_arg}; i+=2 )); do
			for opt in "${(s:,:@)opts_arg[$i]}"; do
				typeset -a opt_ary
				opt_ary=( "${(s:=:@)opt}" )
				if [[ ${#opt_ary} == 1 ]]; then
					opt_ary+=( "" )
				fi
				opts+=( "${opt_ary[@]}" )
			done
		done
	}

	unset opts_arg
fi

typeset -a mount_args
() {
	typeset -a mount_opts
	for key in "${(k@)opts}"; do
		case $key in
			size|help|chmod|chown|syslog) ;;
			-*)
				mount_opts+=( "$key" )
				unset "opts[$key]"
				;;
			*)
				typeset -a optarg
				optarg=( "$key" ${opts[$key]} )
				mount_opts+=( "${(j:=:)optarg}" )
				unset "opts[$key]"
				;;
		esac
	done

	if [[ ${#mount_opts} != 0 ]]; then
		mount_args=( -o "${mount_opts[@]}" )
	fi
}

function exec_logger {
	exec command logger -i -t gce-pd "$@" 1>&- 2>&-
}

if (( $+syslog )); then
	exec 1> >(exec_logger -p user.info) 2> >(exec_logger -p user.warning) 0<&-
fi

if (( $+verbose )); then
	function debug {
		echo "$@"
	}
else
	function debug {}
fi

function usage {
	echo "Usage: $0 disk_name mountpoint [-sfnv] -o size=size[,OTHER_OPTIONS]"
	echo
	echo "See mount.gce-pd(8) or https://github.com/eatnumber1/gce-pd for more information."
}

if (( ${+opts[help]} )); then
	usage
	exit
fi

if (( ! $+fstype )); then
	echo "a subtype must be provided" >&2
	exit 1
fi
readonly FSTYPE="${fstype#*.}"
zmodload -F zsh/parameter +p:commands
if (( ! ${+commands[mkfs.$FSTYPE]} )); then
	echo "unable to find mkfs.$FSTYPE on PATH" >&2
	exit 1
fi

if [[ $# -ne 2 ]]; then
	usage >&2
	exit 1
fi

if [[ $USERNAME != root ]]; then
	echo "Must be run as root" >&2
	exit 1
fi

if (( ! ${+opts[size]} )); then
	echo "The option \"size\" is required." >&2
	exit 1
fi

readonly DISK_NAME_SUFFIX="$1"
readonly MOUNT_POINT=$2
readonly INSTANCE_NAME="$HOST"
readonly DISK_NAME="${INSTANCE_NAME}-${DISK_NAME_SUFFIX}"

if (( $+verbose )); then
	function quiet_unless_failure {
		"$@"
	}
else
	function quiet_unless_failure {
		integer ret
		() {
			local outfile="$1"
			shift
			echo "$*" >> $outfile
			"$@" >> $outfile 2>> $outfile || ret=$?
			if [[ $ret -ne 0 ]]; then
				cat $outfile
			fi
		} =(:) "$@"
		return $ret
	}
fi

function gcloud {
	command gcloud --quiet "$@"
}

function get_metadata {
	curl -qqq -s -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/$1"
}

function get_project {
	get_metadata "project/project-id"
}

function get_zone {
	local z="$(get_metadata "instance/zone")"
	echo "${z##*/}"
}

# Usage: disk_exists disk_name
function disk_exists {
	local expected_uri="https://www.googleapis.com/compute/v1/projects/$(get_project)/zones/$(get_zone)/disks/$1"
	gcloud compute disks list --uri | while read -r uri; do
		if [[ $uri == $expected_uri ]]; then
			return 0
		fi
	done
	return 1
}

function has_filesystem {
	integer ret
	blkid -n $FSTYPE "$1" >/dev/null || ret=$?
	case $ret in
		0|2) return $ret;;
		*) exit $ret;;
	esac
}

readonly LOCK_FILE="/var/lock/gce-pd-$DISK_NAME.lock"
echo -n > $LOCK_FILE

integer lockfd
zmodload -F zsh/system +b:zsystem

function acquire_lock {
	integer ret
	zsystem flock -t 0 -f lockfd $LOCK_FILE || ret=$?
	if (( $ret == 2 )); then
		debug "waiting to acquire exclusive lock on $LOCK_FILE"
		zsystem flock -f lockfd $LOCK_FILE
	elif (( $ret != 0 )); then
		return $ret
	fi
}

function release_lock {
	zsystem flock -u $lockfd
}

function unmount_listener {
	set_purpose unmounter

	debug "waiting for unmount"
	quiet_unless_failure inotifywait -t 0 -e unmount $MOUNT_POINT

	acquire_lock
	{
		debug "detaching disk $DISK_NAME"
		quiet_unless_failure gcloud compute instances detach-disk $INSTANCE_NAME --disk $DISK_NAME
		debug "deleting disk $DISK_NAME"
		quiet_unless_failure gcloud compute disks delete $DISK_NAME
	} always {
		release_lock
	}
}

acquire_lock
{
	debug "checking if disk \"$DISK_NAME\" exists"
	if disk_exists $DISK_NAME; then
		debug "disk exists"
	else
		debug "creating disk \"$DISK_NAME\""
		quiet_unless_failure gcloud compute disks create --size $opts[size] $DISK_NAME
	fi

	readonly DISK_DEVICE=/dev/disk/by-id/google-$DISK_NAME

	debug "checking if disk \"$DISK_NAME\" is attached to \"$INSTANCE_NAME\""
	if [[ -e $DISK_DEVICE ]]; then
		debug "already attached at $DISK_DEVICE"
	else
		debug "attaching disk \"$DISK_NAME\" to \"$INSTANCE_NAME\""
		quiet_unless_failure gcloud compute instances attach-disk $INSTANCE_NAME --disk $DISK_NAME --device-name $DISK_NAME
		quiet_unless_failure gcloud compute instances set-disk-auto-delete $INSTANCE_NAME --auto-delete --disk $DISK_NAME &!
	fi

	debug "checking if $DISK_DEVICE is formatted with $FSTYPE"
	if has_filesystem $DISK_DEVICE; then
		debug "already formatted"
	else
		debug "creating $FSTYPE filesystem on $DISK_DEVICE"
		declare -a mkfs_opts
		if (( ! $+verbose )); then
			mkfs_opts+=( -q )
		fi
		mkfs.$FSTYPE "${mkfs_opts[@]}" -F $DISK_DEVICE
	fi

	debug "mounting $DISK_DEVICE on $MOUNT_POINT as $FSTYPE"
	mount -t $FSTYPE "${mount_args[@]}" $DISK_DEVICE $MOUNT_POINT
	if (( ! $+fake )); then
		unmount_listener &!
	fi

	if (( $+opts[chmod] )); then
		debug "changing mode of $MOUNT_POINT to ${opts[chmod]}"
		declare -a chmod_opts
		if (( $+verbose )); then
			chmod_opts+=( -v )
		fi
		chmod "${chmod_opts[@]}" ${opts[chmod]} $MOUNT_POINT
	fi

	if (( $+opts[chown] )); then
		debug "changing owner of $MOUNT_POINT to ${opts[chown]}"
		zmodload -F zsh/files +b:chown
		chown -s ${opts[chown]} $MOUNT_POINT
	fi
} always {
	release_lock
}
